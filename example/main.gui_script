local defquest = require("defquest.defquest")
local defsave = require("defsave.defsave")

local quests_text = ""

local function construct_quests_text()
	local quests_text_active = "Active Quests: \n"
	local quests_text_finished = "Finished Quests: \n"
	for key, value in pairs(defquest.quests) do
		if defquest.quests[key].finished ~= true then
			local quest_text = "  " .. key .. " " .. defquest.format_time(defquest.get_time_left(key))
			quests_text_active = quests_text_active .. quest_text .. " \n"
		else
			quests_text_finished = quests_text_finished .. "  " .. key .. " \n"
		end
	end
	return quests_text_active .. "\n" .. quests_text_finished
	
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	
	defsave.appname = "defquest"
	defsave.autosave = true
	defsave.verbose = true
	
	--defquest.use_defsave = false
	--defquest.use_defwindow = false
	defquest.verbose = true
	defquest.init()
	
	--defquest.add(nil, {minutes = 5}, {reward_gold = 100})
	--defquest.add(nil, {seconds = 10}, {reward_gold = 100})
	--defquest.add(nil, {minutes = 1}, {reward_gold = 100})
	--defquest.add(nil, {minutes = 1}, {reward_gold = 100})
	--defquest.add(nil, {minutes = 1}, {reward_gold = 100})
	--defquest.add(nil, {minutes = 1}, {reward_gold = 100})
	--defquest.add(nil, {minutes = 2}, {reward_gold = 100})
	--defquest.add(nil, {midnight = true}, {reward_gold = 100})
	--defquest.add(nil, {noon = true}, {reward_gold = 100})

	
	--defquest.add("hour_wait", {minutes = 60}, {reward_gold = 100})
	
	--pprint(defquest.quests)
	
	self.node_status = gui.get_node("status")
	self.node_time = gui.get_node("time")
	self.node_quests = gui.get_node("quests")
	
	--print(defquest.format_time(123456789))

end

function final(self)
	defquest.final()
end

function update(self, dt)
	defquest.update(dt)
	--defquest.mark_finished()
	
	gui.set_text(self.node_time, defquest.time_now)
	gui.set_text(self.node_quests, construct_quests_text())
	
	if defquest.disconnected == true then
		gui.set_text(self.node_status, "DISCONNECTED")
	else
		gui.set_text(self.node_status, "CONNECTED")
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("key_z") and action.released then
		defquest.clear_finished()
	end	
	if action_id == hash("key_x") and action.released then
		defquest.clear_all()
	end
	
	if action_id == hash("key_1") and action.released then
		defquest.add(nil, {minutes = 1}, nil, {"defold", "fish"})
	end	
	if action_id == hash("key_2") and action.released then
		defquest.add(nil, {minutes = 2}, nil)
	end	
	if action_id == hash("key_3") and action.released then
		defquest.add(nil, {minutes = 3}, nil)
	end	
	if action_id == hash("key_4") and action.released then
		defquest.add(nil, {minutes = 4}, nil)
	end	
	if action_id == hash("key_5") and action.released then
		defquest.add(nil, {minutes = 5}, nil)
	end	
	if action_id == hash("key_t") and action.released then
		--pprint(defquest.get_tagged("defold", defquest.ACTIVE))
		--pprint(defquest.get_active())
		defquest.shift_end_time(defquest.get_active(), -10)
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
